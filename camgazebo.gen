/*/
 * Copyright (c) 2020 LAAS/CNRS
 * All rights reserved.
 *
 * Redistribution  and  use  in  source  and binary  forms,  with  or  without
 * modification, are permitted provided that the following conditions are met:
 *
 *   1. Redistributions of  source  code must retain the  above copyright
 *      notice and this list of conditions.
 *   2. Redistributions in binary form must reproduce the above copyright
 *      notice and  this list of  conditions in the  documentation and/or
 *      other materials provided with the distribution.
 *
 * THE SOFTWARE  IS PROVIDED "AS IS"  AND THE AUTHOR  DISCLAIMS ALL WARRANTIES
 * WITH  REGARD   TO  THIS  SOFTWARE  INCLUDING  ALL   IMPLIED  WARRANTIES  OF
 * MERCHANTABILITY AND  FITNESS.  IN NO EVENT  SHALL THE AUTHOR  BE LIABLE FOR
 * ANY  SPECIAL, DIRECT,  INDIRECT, OR  CONSEQUENTIAL DAMAGES  OR  ANY DAMAGES
 * WHATSOEVER  RESULTING FROM  LOSS OF  USE, DATA  OR PROFITS,  WHETHER  IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR  OTHER TORTIOUS ACTION, ARISING OUT OF OR
 * IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 *                                                  Martin Jacquet - June 2020
 */
/* ---- Includes ---------------------------------------------------------- */
#pragma require "openrobots2-idl >= 2.0"
#pragma require "vision-idl"

#include "or/sensor/camera.gen"

/* ---- Component declaration --------------------------------------------- */
component camgazebo {
    version         "1.0";
    email           "martin.jacquet@laas.fr";
    lang			"c";
    require         "genom3 >= 2.99.26";
    codels-require  "gazebo", "opencv";

    /* ---- Interfaces ---------------------------------------------------- */
    provides or_camera;

    /* ---- Exceptions ---------------------------------------------------- */
    exception e_mem { string<128> what; };
    exception e_io { string<128> what; };

    /* ---- Ports --------------------------------------------------------- */
    /* interfaces ports:
     *  port multiple out   or::sensor::frame    frame;
     *  port out  or::sensor::intrinsics    intrinsics;
     *  port out  or::sensor::extrinsics    extrinsics;
     */

    /* ---- Types --------------------------------------------------------- */

    /* ---- IDS ----------------------------------------------------------- */
    ids {
        or_camera::info info;
        or_camera::pipe pipe;
        or_camera::data data;

        float hfov;
    };

    /* ---- Constants ----------------------------------------------------- */
    const unsigned short poll_duration_sec = 1; // duration (sec) of each poll before releasing mutex

    /* ---- Main task ----------------------------------------------------- */
    task main {
        codel<start> camgz_start(out ::ids, out frame, out extrinsics, out intrinsics)
            yield wait;

        async codel<wait> camgz_wait(in info.started, inout data)
            yield pause::wait, wait, pub;

        codel<pub> camgz_pub(in info.compression_rate, inout data, out frame)
            yield wait;
    };

    /* ---- Hardware connection ------------------------------------------- */
    activity connect(in string<256> topic = : "name of gazebo world") {
        task main;

        codel<start> camgz_connect(in topic, out data, out pipe, out intrinsics, out info.started)
            yield ether;
    };

    activity disconnect() {
        task main;

        codel<start> camgz_disconnect(out data, out info.started)
            yield ether;
    };

    /* ---- Calibration --------------------------------------------------- */
    activity get_K(out sequence<float,5> K) {
        task main;

        codel<start> camgz_get_K(in intrinsics, out K)
            yield ether;
    };

    activity get_D(out sequence<float,5> D) {
        task main;

        codel<start> camgz_get_D(in intrinsics, out D)
            yield ether;
    };

    activity get_extrinsics(out sequence<float,6> ext) {
        task main;

        codel<start> camgz_get_extrinsics(in extrinsics, out ext)
            yield ether;
    };

    activity set_extrinsics(in sequence<float,6> ext_values) {
        task main;

        codel<start> camgz_set_extrinsics(in ext_values, out extrinsics)
            yield ether;
    };

    activity set_hfov(in float hfov_val = 1.047 : "Camera horizon FOV (in radians)") {
        task main;

        codel<start> camgz_set_hfov(in hfov_val, out hfov, in info.size, out intrinsics)
            yield ether;
    };

    activity set_format(in unsigned short w_val = 320 : "Camera pixel width",
                        in unsigned short h_val = 240 : "Camera pixel height",
                        in unsigned short c_val = 3 : "Number of image channels (1,3)") {
        task main;
        throw e_io;

        codel<start> camgz_set_fmt(in w_val, in h_val, in c_val, out data, in hfov, out info.size, out info.format, out frame, out intrinsics)
            yield ether;
    };

    activity set_disto(in sequence<float,5> dist_values) {
        task main;

        codel<start> camgz_set_disto(in dist_values, out intrinsics)
            yield ether;
    };

    /* ---- Control setters ----------------------------------------------- */
    attribute set_compression(in info.compression_rate = -1 : "Image compression (0-100) ; -1 to disable compression.") {
        throw e_io;
        validate set_compression_rate(local in compression_rate);
    };
};
